#!/usr/bin/env python3
"""
AI Pipeline - Production Main Application
FastAPI + Real AI APIs Integration
"""

import asyncio
import logging
import os
from dotenv import load_dotenv


# FastAPI imports
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
import uvicorn
from api.delegation_v7 import router as delegation_router

# Local imports
from api.chat_endpoints import router as chat_router
from api.delegation_v7 import router as delegation_router

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
ENVIRONMENT = os.getenv('ENVIRONMENT', 'production')
PORT = int(os.getenv('PORT', 4000))
HOST = os.getenv('HOST', '0.0.0.0')

# AI API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Telegram Bot –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# Database –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DATABASE_URL = os.getenv('DATABASE_URL')
REDIS_URL = os.getenv('REDIS_URL')

# Frontend URLs –¥–ª—è CORS
FRONTEND_URLS = [
    "https://aisolar.swapoil.de",
    "http://localhost:3000",
    "http://localhost:8000"
]

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="AI Pipeline Interface",
    description="Production API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –∞–≥–µ–Ω—Ç–∞–º–∏",
    version="2.0.0",
    docs_url="/docs" if ENVIRONMENT == "development" else None,
    redoc_url="/redoc" if ENVIRONMENT == "development" else None
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=FRONTEND_URLS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(chat_router)
app.include_router(delegation_router, prefix="/api/delegation")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è production
if os.path.exists("frontend/build"):
    app.mount("/static", StaticFiles(directory="frontend/build/static"), name="static")
    
    @app.get("/{full_path:path}", response_class=HTMLResponse)
    async def serve_spa(full_path: str):
        """Serve React SPA"""
        if full_path.startswith("api/") or full_path.startswith("docs") or full_path.startswith("static/"):
            return {"error": "Not found"}
        
        try:
            with open("frontend/build/index.html", "r", encoding="utf-8") as f:
                return HTMLResponse(content=f.read())
        except FileNotFoundError:
            return {"error": "Frontend not built"}


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI Pipeline Production API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π API
    missing_keys = []
    if not CLAUDE_API_KEY:
        missing_keys.append("CLAUDE_API_KEY")
    if not DEEPSEEK_API_KEY:
        missing_keys.append("DEEPSEEK_API_KEY")
    
    if missing_keys:
        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API –∫–ª—é—á–∏: {', '.join(missing_keys)}")
    else:
        logger.info("‚úÖ –í—Å–µ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –≤–Ω–µ—à–Ω–∏–º API
        await init_ai_services()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if DATABASE_URL:
            await init_database()
        else:
            logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
        if REDIS_URL:
            await init_redis()
        else:
            logger.warning("‚ö†Ô∏è REDIS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

async def init_ai_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    # –¢–µ—Å—Ç Claude API
    if CLAUDE_API_KEY:
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Claude API
            logger.info("‚úÖ Claude API –≥–æ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå Claude API –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç DeepSeek API  
    if DEEPSEEK_API_KEY:
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç DeepSeek API
            logger.info("‚úÖ DeepSeek API –≥–æ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå DeepSeek API –æ—à–∏–±–∫–∞: {e}")

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL...")
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        # import asyncpg
        # conn = await asyncpg.connect(DATABASE_URL)
        # await conn.close()
        logger.info("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå PostgreSQL –æ—à–∏–±–∫–∞: {e}")

async def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis"""
    logger.info("üî¥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis...")
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        # import aioredis
        # redis = aioredis.from_url(REDIS_URL)
        # await redis.ping()
        logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå Redis –æ—à–∏–±–∫–∞: {e}")

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>AI Pipeline Production API</title>
        <meta charset="utf-8">
        <style>
            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; padding: 20px; background: #f5f5f5; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .status { background: #e7f5e7; padding: 15px; border-radius: 8px; border-left: 4px solid #28a745; }
            .warning { background: #fff3cd; padding: 15px; border-radius: 8px; border-left: 4px solid #ffc107; }
            .endpoint { background: #f8f9fa; padding: 10px; margin: 5px 0; border-radius: 5px; font-family: monospace; }
            a { color: #007bff; text-decoration: none; }
            a:hover { text-decoration: underline; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ AI Pipeline Production API</h1>
            <div class="status">
                <h3>‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç</h3>
                <p><strong>–í–µ—Ä—Å–∏—è:</strong> 2.0.0 | <strong>–†–µ–∂–∏–º:</strong> Production</p>
            </div>
            
            <h3>üéØ API Endpoints:</h3>
            <div class="endpoint">GET <a href="/api/chat/agents">/api/chat/agents</a> - –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤</div>
            <div class="endpoint">GET <a href="/api/chat/projects">/api/chat/projects</a> - –ü—Ä–æ–µ–∫—Ç—ã</div>
            <div class="endpoint">POST /api/chat/send - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</div>
            <div class="endpoint">WS /api/chat/ws/{user_id} - WebSocket —á–∞—Ç</div>
            <div class="endpoint">GET <a href="/health">/health</a> - Health check</div>
            
            <h3>üì± Frontend:</h3>
            <p>React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —ç—Ç–æ–º—É –∂–µ –¥–æ–º–µ–Ω—É</p>
            
            <div class="warning">
                <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –≠—Ç–æ production API. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            </div>
        </div>
    </body>
    </html>
    """

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è Docker/Kubernetes"""
    return {
        "status": "healthy",
        "service": "AI Pipeline Production API",
        "version": "2.0.0",
        "environment": ENVIRONMENT,
        "apis": {
            "claude": bool(CLAUDE_API_KEY),
            "deepseek": bool(DEEPSEEK_API_KEY),
            "database": bool(DATABASE_URL),
            "redis": bool(REDIS_URL)
        }
    }

@app.get("/status")
async def system_status():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "timestamp": asyncio.get_event_loop().time(),
        "uptime": "N/A",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ uptime
        "services": {
            "fastapi": "running",
            "claude_api": "ready" if CLAUDE_API_KEY else "not_configured",
            "deepseek_api": "ready" if DEEPSEEK_API_KEY else "not_configured",
            "database": "ready" if DATABASE_URL else "not_configured",
            "redis": "ready" if REDIS_URL else "not_configured"
        }
    }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ –¥–ª—è production"""
    logger.info("üöÄ AI Pipeline Production Server Starting...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not CLAUDE_API_KEY and not DEEPSEEK_API_KEY:
        logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã API –∫–ª—é—á–∏ –¥–ª—è AI —Å–µ—Ä–≤–∏—Å–æ–≤!")
        logger.info("üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CLAUDE_API_KEY –∏ DEEPSEEK_API_KEY –≤ .env")
    
    # –ó–∞–ø—É—Å–∫ production —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "main:app",
        host=HOST,
        port=PORT,
        reload=False,  # –í production –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º reload
        log_level="info",
        access_log=True,
        workers=1  # –î–ª—è Docker –æ–±—ã—á–Ω–æ 1 worker
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë AI Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise