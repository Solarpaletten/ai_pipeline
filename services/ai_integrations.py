# services/ai_integrations.py
"""
–†–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å AI API
"""

import asyncio
import logging
import os
import httpx
from typing import Dict, Any

logger = logging.getLogger(__name__)

class ClaudeService:
    """–†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Claude API"""
    
    def __init__(self):
        self.api_key = os.getenv('CLAUDE_API_KEY')
        self.base_url = "https://api.anthropic.com/v1"
        self.headers = {
            "x-api-key": self.api_key,
            "content-type": "application/json",
            "anthropic-version": "2023-06-01"
        }
    
    async def send_message(self, message: str, context: str = "") -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Claude"""
        if not self.api_key:
            return "‚ùå Claude API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "model": "claude-3-sonnet-20240229",
                    "max_tokens": 1000,
                    "messages": [
                        {
                            "role": "user",
                            "content": f"{context}\n\n{message}" if context else message
                        }
                    ]
                }
                
                response = await client.post(
                    f"{self.base_url}/messages",
                    headers=self.headers,
                    json=payload,
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return data['content'][0]['text']
                else:
                    logger.error(f"Claude API error: {response.status_code} - {response.text}")
                    return f"‚ùå Claude API –æ—à–∏–±–∫–∞: {response.status_code}"
                    
        except Exception as e:
            logger.error(f"Claude API exception: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ Claude: {str(e)}"

class DeepSeekService:
    """–†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek API"""
    
    def __init__(self):
        self.api_key = os.getenv('DEEPSEEK_API_KEY')
        self.base_url = "https://api.deepseek.com/v1"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    async def send_message(self, message: str, context: str = "") -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è DeepSeek"""
        if not self.api_key:
            return "‚ùå DeepSeek API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        try:
            async with httpx.AsyncClient() as client:
                payload = {
                    "model": "deepseek-coder",
                    "messages": [
                        {
                            "role": "system",
                            "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ü–û. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∫–æ–¥."
                        },
                        {
                            "role": "user", 
                            "content": f"{context}\n\n{message}" if context else message
                        }
                    ],
                    "max_tokens": 2000,
                    "temperature": 0.1
                }
                
                response = await client.post(
                    f"{self.base_url}/chat/completions",
                    headers=self.headers,
                    json=payload,
                    timeout=30.0
                )
                
                if response.status_code == 200:
                    data = response.json()
                    return data['choices'][0]['message']['content']
                else:
                    logger.error(f"DeepSeek API error: {response.status_code} - {response.text}")
                    return f"‚ùå DeepSeek API –æ—à–∏–±–∫–∞: {response.status_code}"
                    
        except Exception as e:
            logger.error(f"DeepSeek API exception: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ DeepSeek: {str(e)}"

class DashkaService:
    """Dashka - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã (–ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª)"""
    
    async def send_message(self, message: str, context: str = "") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Dashka"""
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if any(word in message.lower() for word in ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º', '—Ñ—É–Ω–∫—Ü–∏', '–∫–ª–∞—Å—Å', 'api']):
            return (
                "ü§ñ **Dashka:** –í–∏–∂—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É!\n\n"
                "üìã **–ú–æ–π –ø–ª–∞–Ω:**\n"
                "1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—é –∑–∞–¥–∞—á—É Claude –¥–ª—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
                "2. –ó–∞—Ç–µ–º DeepSeek —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n"
                "3. –ü—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n\n"
                "‚ö° **–î–µ–π—Å—Ç–≤–∏–µ:** –ù–∞–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!"
            )
        
        elif any(word in message.lower() for word in ['–∞–Ω–∞–ª–∏–∑', '–ø–ª–∞–Ω', '—Å—Ç—Ä–∞—Ç–µ–≥', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä']):
            return (
                "ü§ñ **Dashka:** –≠—Ç–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞!\n\n"
                "üß† **–†–µ—à–µ–Ω–∏–µ:** –ù–∞–ø—Ä–∞–≤–ª—è—é Claude –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
                "üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
                "‚úÖ **–°—Ç–∞—Ç—É—Å:** –ó–∞–¥–∞—á–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É!"
            )
        
        else:
            return (
                "ü§ñ **Dashka:** –ü—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞–¥–∞—á—É!\n\n"
                "üéØ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é:**\n"
                f"- –ó–∞–ø—Ä–æ—Å: {message[:100]}...\n"
                "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –°—Ä–µ–¥–Ω–∏–π\n"
                "- –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: –ù–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è\n\n"
                "‚è≥ **–°—Ç–∞—Ç—É—Å:** –í –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥–æ–π AI Pipeline"
            )

class AIServiceRouter:
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ AI —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self):
        self.claude = ClaudeService()
        self.deepseek = DeepSeekService()
        self.dashka = DashkaService()
        
        self.services = {
            'claude': self.claude,
            'deepseek': self.deepseek,
            'dashka': self.dashka
        }
    
    async def route_message(self, message: str, agent_id: str, context: str = "") -> str:
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É AI"""
        
        service = self.services.get(agent_id)
        if not service:
            return f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç: {agent_id}"
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            agent_context = f"[–ê–≥–µ–Ω—Ç: {agent_id.upper()}] {context}"
            
            response = await service.send_message(message, agent_context)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            logger.info(f"AI Route: {agent_id} | Message length: {len(message)} | Response length: {len(response)}")
            
            return response
            
        except Exception as e:
            logger.error(f"AI routing error for {agent_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º {agent_id}: {str(e)}"
    
    async def get_agent_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        status = {}
        
        for agent_id in self.services.keys():
            if agent_id == 'claude':
                status[agent_id] = {
                    "online": bool(self.claude.api_key),
                    "type": "external_api"
                }
            elif agent_id == 'deepseek':
                status[agent_id] = {
                    "online": bool(self.deepseek.api_key),
                    "type": "external_api"
                }
            elif agent_id == 'dashka':
                status[agent_id] = {
                    "online": True,
                    "type": "internal_logic"
                }
        
        return status

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞
ai_router = AIServiceRouter()