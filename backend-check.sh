#!/bin/bash

# üîç –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Backend AI Pipeline

echo "üîç –ü–û–õ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê BACKEND AI PIPELINE"
echo "========================================"
echo ""

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd /var/www/ai_pipeline

echo "üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
echo ""

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ (–∏—Å–∫–ª—é—á–∞—è frontend)
echo "üìÇ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê (–±–µ–∑ frontend):"
echo "------------------------------------"
find . -maxdepth 2 -type d | grep -v frontend | grep -v node_modules | grep -v __pycache__ | sort
echo ""

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
echo "üìÑ –û–°–ù–û–í–ù–´–ï –§–ê–ô–õ–´:"
echo "------------------"
ls -la | grep -E "\.(py|yml|yaml|env|json|txt|md)$"
echo ""

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Python —Ñ–∞–π–ª—ã
echo "üêç PYTHON –§–ê–ô–õ–´:"
echo "----------------"
find . -name "*.py" | grep -v frontend | head -20
echo ""

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
echo "üê≥ DOCKER –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:"
echo "-----------------------"
if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml –Ω–∞–π–¥–µ–Ω"
    echo "–°–µ—Ä–≤–∏—Å—ã –≤ docker-compose.yml:"
    grep -A 1 "services:" docker-compose.yml || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
else
    echo "‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

if [ -f "Dockerfile" ]; then
    echo "‚úÖ Dockerfile –Ω–∞–π–¥–µ–Ω"
    head -5 Dockerfile
else
    echo "‚ùå Dockerfile –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
echo ""

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "‚öôÔ∏è  –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:"
echo "-------------------------"
if [ -f ".env" ]; then
    echo "‚úÖ .env –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ"
    echo "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
    grep -E "^(API_|TELEGRAM_|ANTHROPIC_|OPENAI_|DEEPSEEK_|POSTGRES_)" .env | head -10
else
    echo "‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ"
fi

if [ -f ".env.example" ]; then
    echo "‚úÖ .env.example –Ω–∞–π–¥–µ–Ω"
else
    echo "‚ùå .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
echo ""

# 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
echo "üì¶ PYTHON –ó–ê–í–ò–°–ò–ú–û–°–¢–ò:"
echo "----------------------"
if [ -f "requirements.txt" ]; then
    echo "‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω"
    echo "–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:"
    head -10 requirements.txt
else
    echo "‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
echo ""

# 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
echo "üîÑ –ó–ê–ü–£–©–ï–ù–ù–´–ï –ü–†–û–¶–ï–°–°–´:"
echo "----------------------"
echo "Python –ø—Ä–æ—Ü–µ—Å—Å—ã:"
ps aux | grep python | grep -v grep | head -5
echo ""
echo "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -10
echo ""

# 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
echo "üåê –ó–ê–ù–Ø–¢–´–ï –ü–û–†–¢–´:"
echo "----------------"
echo "–ü–æ—Ä—Ç 8000 (Backend API):"
netstat -tulpn | grep :8000 || echo "–ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω"
echo ""
echo "–ü–æ—Ä—Ç 5000 (Bot):"
netstat -tulpn | grep :5000 || echo "–ü–æ—Ä—Ç 5000 —Å–≤–æ–±–æ–¥–µ–Ω"
echo ""

# 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
echo "üìã –õ–û–ì–ò:"
echo "--------"
if [ -d "logs" ]; then
    echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–∞–π–¥–µ–Ω–∞"
    ls -la logs/
else
    echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
fi
echo ""

# 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –Ω–∞–ø—Ä—è–º—É—é
echo "üîß –ü–†–û–í–ï–†–ö–ê API:"
echo "---------------"
echo "Backend Health Check (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ):"
curl -s http://207.154.220.86:8000/health 2>/dev/null || echo "‚ùå Backend API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
echo ""

echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∞–≥–µ–Ω—Ç–æ–≤:"
curl -s http://207.154.220.86:8000/api/agents/status 2>/dev/null || echo "‚ùå API agents –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
echo ""

# 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo "üåê NGINX –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:"
echo "---------------------"
if [ -d "/etc/nginx/sites-available" ]; then
    echo "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–æ–≤:"
    ls /etc/nginx/sites-available/ | grep -E "(aisolar|backend)"
else
    echo "‚ùå Nginx sites-available –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi
echo ""

# 12. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è  –ë–ê–ó–ê –î–ê–ù–ù–´–•:"
echo "----------------"
if command -v psql &> /dev/null; then
    echo "‚úÖ PostgreSQL CLI –¥–æ—Å—Ç—É–ø–µ–Ω"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if [ ! -z "$DATABASE_URL" ]; then
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î..."
        psql $DATABASE_URL -c "SELECT version();" 2>/dev/null | head -1 || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î"
    else
        echo "‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    fi
else
    echo "‚ùå PostgreSQL CLI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi
echo ""

# 13. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
echo "üíª –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´:"
echo "--------------------"
echo "CPU –∏ Memory:"
top -bn1 | grep "Cpu\|Mem" | head -2
echo ""
echo "–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:"
df -h | grep -E "(/$|/var)"
echo ""

# 14. –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
echo "üéØ –ü–õ–ê–ù –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:"
echo "==================="
echo ""
echo "1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–¥–æ–º–µ–Ω backend.aisolar.swapoil.de –≤ nginx"
echo "2. –û–±–Ω–æ–≤–∏—Ç—å DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è backend –ø–æ–¥–¥–æ–º–µ–Ω–∞"
echo "3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é backend –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–æ–¥–¥–æ–º–µ–Ω–µ"
echo "4. –û–±–Ω–æ–≤–∏—Ç—å frontend –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend.aisolar.swapoil.de"
echo "5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–∞"
echo ""

echo "‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:"
echo "cat docker-compose.yml"
echo "cat .env"
echo "cat requirements.txt"
echo "ls -la"
