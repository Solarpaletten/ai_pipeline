# api/chat_endpoints.py
from fastapi import APIRouter, WebSocket, WebSocketDisconnect, HTTPException
from typing import Dict, List, Optional
import json
import asyncio
from datetime import datetime

from models.chat_models import (
    Message, ChatSession, Project, Agent, AGENTS,
    ChatRequest, ChatResponse
)

router = APIRouter(prefix="/api/chat", tags=["chat"])

# WebSocket connections storage
class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        
    async def connect(self, websocket: WebSocket, user_id: str):
        await websocket.accept()
        self.active_connections[user_id] = websocket
        
    def disconnect(self, user_id: str):
        if user_id in self.active_connections:
            del self.active_connections[user_id]
            
    async def send_personal_message(self, message: str, user_id: str):
        if user_id in self.active_connections:
            await self.active_connections[user_id].send_text(message)

manager = ConnectionManager()

# In-memory storage (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
projects_db: Dict[str, Project] = {}
chat_sessions_db: Dict[str, ChatSession] = {}
messages_db: Dict[str, List[Message]] = {}

# ============== REST API ENDPOINTS ==============

@router.get("/agents")
async def get_agents():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    return {"agents": list(AGENTS.values())}

@router.get("/projects")
async def get_projects():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    return {"projects": list(projects_db.values())}

@router.post("/projects")
async def create_project(name: str, description: str = ""):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"""
    project = Project(name=name, description=description)
    projects_db[project.id] = project
    return {"project": project}

@router.get("/projects/{project_id}/chats")
async def get_project_chats(project_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    if project_id not in projects_db:
        raise HTTPException(status_code=404, detail="Project not found")
    
    project_chats = [
        chat for chat in chat_sessions_db.values() 
        if chat.project_id == project_id
    ]
    return {"chats": project_chats}

@router.post("/send")
async def send_message(request: ChatRequest):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É —á–µ—Ä–µ–∑ REST API"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message = Message(
            sender="user",
            text=request.message,
            agent_id=request.agent_id,
            project_id=request.project_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if request.project_id not in messages_db:
            messages_db[request.project_id] = []
        messages_db[request.project_id].append(user_message)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        agent_response = await process_agent_message(
            request.message, 
            request.agent_id, 
            request.project_id
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_message = Message(
            sender="agent",
            text=agent_response,
            agent_id=request.agent_id,
            agent_name=AGENTS[request.agent_id].name,
            project_id=request.project_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        messages_db[request.project_id].append(response_message)
        
        return ChatResponse(
            message_id=response_message.id,
            response=agent_response,
            agent_id=request.agent_id,
            agent_name=AGENTS[request.agent_id].name,
            timestamp=response_message.timestamp
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/projects/{project_id}/messages")
async def get_project_messages(project_id: str, limit: int = 50):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    if project_id not in projects_db:
        raise HTTPException(status_code=404, detail="Project not found")
    
    project_messages = messages_db.get(project_id, [])
    return {"messages": project_messages[-limit:]}

@router.delete("/projects/{project_id}/messages")
async def clear_project_messages(project_id: str):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    if project_id not in projects_db:
        raise HTTPException(status_code=404, detail="Project not found")
    
    messages_db[project_id] = []
    return {"success": True, "message": "Messages cleared"}

# ============== WEBSOCKET ENDPOINT ==============

@router.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """WebSocket endpoint –¥–ª—è real-time —á–∞—Ç–∞"""
    await manager.connect(websocket, user_id)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            message_data = json.loads(data)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = Message(
                sender="user",
                text=message_data["message"],
                agent_id=message_data["agent_id"],
                project_id=message_data["project_id"]
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            project_id = message_data["project_id"]
            if project_id not in messages_db:
                messages_db[project_id] = []
            messages_db[project_id].append(user_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
            await websocket.send_text(json.dumps({
                "type": "message_received",
                "message": user_message.dict()
            }))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–º
            agent_response = await process_agent_message(
                message_data["message"],
                message_data["agent_id"],
                project_id
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_message = Message(
                sender="agent",
                text=agent_response,
                agent_id=message_data["agent_id"],
                agent_name=AGENTS[message_data["agent_id"]].name,
                project_id=project_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            messages_db[project_id].append(response_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            await websocket.send_text(json.dumps({
                "type": "agent_response",
                "message": response_message.dict()
            }))
            
    except WebSocketDisconnect:
        manager.disconnect(user_id)
    except Exception as e:
        await websocket.send_text(json.dumps({
            "type": "error",
            "error": str(e)
        }))

# ============== HELPER FUNCTIONS ==============

async def process_agent_message(message: str, agent_id: str, project_id: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º"""
    
    if agent_id not in AGENTS:
        return "Unknown agent"
    
    agent = AGENTS[agent_id]
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if agent_id == "dashka":
        return f"ü§ñ Dashka: –ü–æ–Ω—è–ª! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{message}'. –ü–µ—Ä–µ–¥–∞–º –∫–æ–º–∞–Ω–¥–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
    
    elif agent_id == "claude":
        return f"üß† Claude: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{message}'. –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é."
    
    elif agent_id == "deepseek":
        return f"üíª DeepSeek: –ì–æ—Ç–æ–≤ –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: '{message}'. –ù–∞—á–∏–Ω–∞—é –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞."
    
    else:
        return f"{agent.emoji} {agent.name}: –ü–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{message}'"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    test_project = Project(
        name="Test Project",
        description="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ chat widget"
    )
    projects_db[test_project.id] = test_project

# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# init_test_data() - —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ main.py