#!/usr/bin/env python3
import urllib.request
import json
import time
import sys

def test_endpoint(url, name, expected_keys=None):
    try:
        print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
        start_time = time.time()
        
        response = urllib.request.urlopen(url)
        response_time = (time.time() - start_time) * 1000
        
        if response.status != 200:
            print(f"‚ùå {name}: HTTP {response.status}")
            return False
            
        data = json.loads(response.read())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏
        if expected_keys:
            for key in expected_keys:
                if key not in data:
                    print(f"‚ùå {name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}'")
                    return False
        
        print(f"‚úÖ {name}: {response_time:.1f}ms")
        print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)[:200]}...")
        print()
        return True
        
    except Exception as e:
        print(f"‚ùå {name}: {e}")
        return False

def test_websocket():
    """–¢–µ—Å—Ç WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket...")
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', 8000))
        sock.close()
        
        if result == 0:
            print("‚úÖ WebSocket –ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print("‚ùå WebSocket –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå WebSocket: {e}")
        return False

def main():
    print("üöÄ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Pipeline Level 3 Backend\n")
    
    tests = [
        ("http://localhost:8000/health", "Health Check", ["status", "timestamp"]),
        ("http://localhost:8000/", "Root Endpoint", ["message", "status"]),
        ("http://localhost:8000/api/agents/status", "Agents Status", ["agents", "total_agents"]),
        ("http://localhost:8000/api/delegations/recent", "Recent Delegations", ["delegations", "total"]),
    ]
    
    passed = 0
    total = len(tests) + 1  # +1 –¥–ª—è WebSocket
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP endpoints
    for url, name, keys in tests:
        if test_endpoint(url, name, keys):
            passed += 1
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebSocket
    if test_websocket():
        passed += 1
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print(f"ÔøΩÔøΩ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Level 3 Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        return 0
    else:
        print(f"\n‚ùå {total-passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å Backend.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
