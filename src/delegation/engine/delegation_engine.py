"""
üöÄ Level 7: DelegationEngine v1.0
–£–º–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –º–µ–∂–¥—É AI –∞–≥–µ–Ω—Ç–∞–º–∏
"""
from typing import Dict, List, Optional
from enum import Enum
import re

class TaskComplexity(Enum):
    SIMPLE = 1      # –û–¥–∏–Ω –∞–≥–µ–Ω—Ç
    MEDIUM = 2      # –î–≤–∞ –∞–≥–µ–Ω—Ç–∞  
    COMPLEX = 3     # –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞

class DelegationEngine:
    def __init__(self):
        self.agent_capabilities = {
            'dashka': {
                'skills': ['coordination', 'ui_design', 'project_management', 'presentation'],
                'keywords': ['–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è', 'ui', '–¥–∏–∑–∞–π–Ω', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
            },
            'claude': {
                'skills': ['analysis', 'architecture', 'planning', 'documentation'],
                'keywords': ['–∞–Ω–∞–ª–∏–∑', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ø–ª–∞–Ω', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']
            },
            'deepseek': {
                'skills': ['coding', 'implementation', 'debugging', 'optimization'],
                'keywords': ['–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–±–∞–≥']
            }
        }
        
    async def route_task(self, task_text: str) -> Dict:
        """üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        complexity = self._analyze_complexity(task_text)
        chain = self._generate_chain(task_text, complexity)
        
        return {
            'task': task_text,
            'complexity': complexity.name,
            'recommended_chain': chain,
            'reasoning': self._explain_routing(task_text, chain),
            'estimated_time': len(chain) * 5,  # 5 –º–∏–Ω –Ω–∞ –∞–≥–µ–Ω—Ç–∞
            'level': 7
        }
    
    def _analyze_complexity(self, task: str) -> TaskComplexity:
        """üìä –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏"""
        task_lower = task.lower()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        complexity_indicators = 0
        
        if any(word in task_lower for word in ['—Å–æ–∑–¥–∞—Ç—å', '–ø–æ—Å—Ç—Ä–æ–∏—Ç—å', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å', 'implement']):
            complexity_indicators += 2
            
        if any(word in task_lower for word in ['–∞–Ω–∞–ª–∏–∑', '–ø–ª–∞–Ω', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', 'analyze']):
            complexity_indicators += 1
            
        if any(word in task_lower for word in ['–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '—Å–∏—Å—Ç–µ–º–∞', '–ø–æ–ª–Ω—ã–π', 'complete']):
            complexity_indicators += 2
            
        if complexity_indicators >= 3:
            return TaskComplexity.COMPLEX
        elif complexity_indicators >= 1:
            return TaskComplexity.MEDIUM
        else:
            return TaskComplexity.SIMPLE
    
    def _generate_chain(self, task: str, complexity: TaskComplexity) -> List[str]:
        """üîó –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        task_lower = task.lower()
        
        if complexity == TaskComplexity.SIMPLE:
            # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏
            if any(word in task_lower for word in self.agent_capabilities['dashka']['keywords']):
                return ['dashka']
            elif any(word in task_lower for word in self.agent_capabilities['claude']['keywords']):
                return ['claude']
            else:
                return ['deepseek']
                
        elif complexity == TaskComplexity.MEDIUM:
            # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–≤—É—Ö –∞–≥–µ–Ω—Ç–æ–≤
            if any(word in task_lower for word in ['–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'implementation']):
                return ['claude', 'deepseek']  # –ê–Ω–∞–ª–∏–∑ + –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
            else:
                return ['dashka', 'claude']   # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è + –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                
        else:  # COMPLEX
            # –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            return ['dashka', 'claude', 'deepseek', 'dashka']
    
    def _explain_routing(self, task: str, chain: List[str]) -> str:
        """üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        explanations = {
            'dashka': '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º',
            'claude': '–∞–Ω–∞–ª–∏–∑ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 
            'deepseek': '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
        }
        
        if len(chain) == 1:
            return f"–ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ ‚Üí {explanations[chain[0]]}"
        elif len(chain) == 2:
            return f"–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å ‚Üí {explanations[chain[0]]} + {explanations[chain[1]]}"
        else:
            return "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Üí –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
delegation_engine = DelegationEngine()
